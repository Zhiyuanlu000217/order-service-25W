name: Build, Test, and Deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  # Step 1: Build Job (Unit Test and Build Docker Image)
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          npm install
          echo "Dependencies installed successfully!"

      - name: Unit Tests
        run: |
          npm test
          echo "Unit tests completed successfully!"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ env.DOCKER_IMAGE }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Step 2: Test Job (Integration Tests)
  Test:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Integration Tests
        run: |
          echo "Running integration tests..."
          # Add your integration test commands here
          echo "Integration tests completed successfully!"

  # Step 3: Release Job (Release Docker Image)
  Release:
    runs-on: ubuntu-latest
    needs: Test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Step 4: Deploy Job
  Deploy:
    runs-on: ubuntu-latest
    needs: Release
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to AKS
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          DEPLOYMENT_NAME: order-service
          CONTAINER_NAME: order-service
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=${{ env.DOCKER_IMAGE }}:latest
          kubectl rollout restart deployment/$DEPLOYMENT_NAME
      
      - name: Verify Deployment
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          DEPLOYMENT_NAME: order-service
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get pods -o wide